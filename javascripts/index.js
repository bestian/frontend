// Generated by LiveScript 1.3.0
(function(){
  var chainCtrl, toIndex, myHash, myDummy, myGoban;
  chainCtrl = function($scope, $sce, $title, $path, $colMax, $dummy, $hash, $goban, $timeout){
    var res$, i$, ridx$, loadPage;
    $scope.path = $path;
    res$ = [];
    for (i$ = 0; i$ <= $colMax; ++i$) {
      ridx$ = i$;
      res$.push(ridx$);
    }
    $scope.myColumnIndex = res$;
    $scope.myFolderIndex = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    $scope.myI = $hash.asArray()[1] || 0;
    $scope.myJ = $hash.asArray()[2] || 0;
    $scope.title = $hash.asArray()[0] || $title;
    $scope.pageLoading = false;
    $scope.backup = function(){
      var i$, ref$, len$, i;
      for (i$ = 0, len$ = (ref$ = $scope.myFolderIndex).length; i$ < len$; ++i$) {
        i = ref$[i$];
        window.open($path + $title + i + '.csv', '_blank', "width=0, height=0, titlebar=no, toolbar=no");
      }
    };
    $scope.trust = function(url){
      return $sce.trustAsResourceUrl(url);
    };
    $scope.keyPress = function($event){
      var code;
      console.log($event);
      $event.preventDefault();
      code = $event.keyCode;
      if (code === 40) {
        $scope.up(1);
      }
      if (code === 38) {
        $scope.up(-1);
      }
      if (code === 37) {
        $scope.left(-1);
      }
      if (code === 39) {
        $scope.left(1);
      }
      if (code === 32) {
        $scope.goban.data[$scope.myJ].isClosed = !$scope.goban.data[$scope.myJ].isClosed;
      }
    };
    $scope.updateHash = function(){
      $hash.upDateFromArray([$scope.title, $scope.myI, $scope.myJ]);
    };
    loadPage = function(){
      $scope.pageLoading = true;
      $timeout(function(){
        $scope.pageLoading = false;
      }, 2300);
    };
    $scope.setI = function(n){
      if ($scope.myI !== n) {
        loadPage();
        $timeout(function(){
          $scope.myI = n;
          $scope.updateHash();
          $scope.goban.load($scope.myI);
        }, 1000);
      }
    };
    $scope.setJ = function(n){
      if ($scope.myJ !== n) {
        loadPage();
        $timeout(function(){
          $scope.myJ = n;
          $scope.updateHash();
        }, 1000);
      }
    };
    $scope.left = function(n){
      loadPage();
      $scope.goban.load(parseInt($scope.myI) + n);
      $timeout(function(){
        $scope.myI = parseInt($scope.myI);
        $scope.myI += n;
        if ($scope.myI === -1) {
          $scope.myI = $colMax;
        }
        if ($scope.myI === $colMax + 1) {
          $scope.myI = 0;
        }
        $scope.updateHash();
      }, 1000);
    };
    $scope.up = function(n){
      loadPage();
      $timeout(function(){
        $scope.myJ = parseInt($scope.myJ);
        $scope.myJ += n;
        if ($scope.myJ === -1) {
          $scope.myJ = $scope.goban.data.length - 1;
        }
        if ($scope.myJ === $scope.goban.data.length) {
          $scope.myJ = 0;
        }
        $scope.updateHash();
      }, 1000);
    };
    $scope.goban = $goban;
    $scope.goban.data = $dummy;
    $scope.goban.load($scope.myI);
  };
  toIndex = function(){
    return function(list){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = list.length - 1; i$ <= to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    };
  };
  myHash = function(){
    return {
      data: location.hash,
      asArray: function(){
        return this.data.replace('#', '').split('&');
      },
      upDateFromArray: function(list){
        location.hash = '#' + list.join('&');
      }
    };
  };
  myDummy = [
    {
      name: '赤皮仔',
      isFolder: false,
      url: 'https://autolearn.hackpad.com/33EfKKhNtF8'
    }, {
      name: '夾子1',
      isFolder: true,
      isClosed: false
    }, {
      name: '配色',
      isFolder: false,
      pIndex: 1,
      url: 'https://docs.google.com/presentation/d/1fFgk1-gO4mMT1sZV4bAIxW789YitfsOsPnz25ONK3x8/edit#slide=id.p'
    }, {
      name: '作業流程',
      isFolder: false,
      pIndex: 1,
      url: 'https://docs.google.com/drawings/d/10M-JkRQ5aMOCmIKkrJETZjZOQ3i2dyMcBd7e0nKviac/edit?usp=sharing'
    }, {
      name: '完形心理學',
      isFolder: false,
      pIndex: 1,
      url: 'https://docs.google.com/presentation/d/1frZZWrlCOapT_9edhjd5hC0X4K-2NziAvE5IsXm7A-Q/edit#slide=id.p10'
    }, {
      name: '夾子2',
      isFolder: true,
      isClosed: true
    }, {
      name: '配色',
      isFolder: false,
      pIndex: 5,
      url: 'https://docs.google.com/presentation/d/1fFgk1-gO4mMT1sZV4bAIxW789YitfsOsPnz25ONK3x8/edit#slide=id.p'
    }, {
      name: '作業流程',
      isFolder: false,
      pIndex: 5,
      url: 'https://docs.google.com/drawings/d/10M-JkRQ5aMOCmIKkrJETZjZOQ3i2dyMcBd7e0nKviac/edit?usp=sharing'
    }, {
      name: '完形心理學',
      isFolder: false,
      pIndex: 5,
      url: 'https://docs.google.com/presentation/d/1frZZWrlCOapT_9edhjd5hC0X4K-2NziAvE5IsXm7A-Q/edit#slide=id.p10'
    }
  ];
  myGoban = function($http, $path, $title){
    var goban, parseFromCSV;
    goban = new Object;
    parseFromCSV = function(csv){
      var allTextLines, bodyLines, goodList, lastFolder, bestList;
      allTextLines = csv.split(/\r\n|\n/);
      bodyLines = allTextLines.slice(2);
      goodList = bodyLines.map(function(text){
        return text.split(',');
      }).filter(function(list){
        return list[1];
      });
      lastFolder = {
        id: 0,
        set: function(n){
          this.id = n;
        }
      };
      bestList = goodList.map(function(list, index){
        var isClosed, obj;
        isClosed = false;
        if (!list[0]) {
          lastFolder.set(index);
          if (list[2] && list[2].search(/expand(.+)true/ > -1)) {
            isClosed = true;
          }
        }
        obj = (list[0] && {
          url: list[0].replace(/["\s]/g, ''),
          name: list[1].replace(/["\s]/g, ''),
          isFolder: false,
          pIndex: lastFolder.id
        }) || {
          name: list[1],
          isFolder: true,
          isClosed: isClosed
        };
        return obj;
      });
      return bestList;
    };
    goban.load = function(num){
      $http({
        method: "GET",
        url: $path + $title + num + '.csv',
        dataType: "text"
      }).success(function(data){
        return goban.data = parseFromCSV(data);
      });
    };
    return goban;
  };
  angular.module('chainApp', []).constant('$path', 'https://ethercalc.org/').constant('$title', 'bt_frontend').constant('$colMax', 6).constant('$dummy', myDummy).factory('$hash', myHash).factory('$goban', ['$http', '$path', '$title', myGoban]).filter('toIndex', toIndex).controller('chainCtrl', chainCtrl);
}).call(this);
